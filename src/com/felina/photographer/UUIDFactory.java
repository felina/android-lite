// reference: follows the code-samples, best practices from 
// http://android-developers.blogspot.co.uk/2011/03/identifying-app-installations.html
// and the implementation from http://stackoverflow.com/questions/5088474/how-can-i-get-the-uuid-of-my-android-phone-in-an-application
package com.felina.photographer;

import java.io.UnsupportedEncodingException;
import java.util.Random;
import java.util.UUID;

import android.content.Context;
import android.content.SharedPreferences;
import android.provider.Settings.Secure;
import android.telephony.TelephonyManager;

import com.felina.photographer.Constants.Extra;

public class UUIDFactory {
	private static UUID uuid;
	
	public UUIDFactory(Context context) {
		
		if(uuid == null) {
			synchronized (UUIDFactory.class) {
				if(uuid == null) {
					final SharedPreferences prefs = context.getSharedPreferences(Extra.UUID_PREF_FILE, context.MODE_PRIVATE);
					final String id = prefs.getString(Extra.UUID_PREF, null);
					if (id != null) {
						uuid = UUID.fromString(id);
					} else {
						try {
							
	                        TelephonyManager mManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
	                        
	                        if(mManager != null) {
	                        	final String deviceId = mManager.getDeviceId();
	                        	if (deviceId != null) {
	                        		uuid = UUID.nameUUIDFromBytes(deviceId.getBytes("utf8"));
	                        	}
	                        } else {
	                        	final String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);
	                        	if (!"9774d56d682e549c".equals(androidId)) {
	                                uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8"));
	                            } else {
	                            	uuid = UUID.randomUUID();
	                            }
	                        }
	                        
						} catch (UnsupportedEncodingException e) {
							System.out.println(e);
						}
						
						prefs.edit().putString(Extra.UUID_PREF, uuid.toString() ).commit();
					}
				}
			}
		}
	}
	
	/**
     * Returns a unique UUID for the current android device.  As with all UUIDs, this unique ID is "very highly likely"
     * to be unique across all Android devices.  Much more so than ANDROID_ID is.
     *
     * The UUID is generated by using ANDROID_ID as the base key if appropriate, falling back on
     * TelephonyManager.getDeviceID() if ANDROID_ID is known to be incorrect, and finally falling back
     * on a random UUID that's persisted to SharedPreferences if getDeviceID() does not return a
     * usable value.
     *
     * In some rare circumstances, this ID may change.  In particular, if the device is factory reset a new device ID
     * may be generated.  In addition, if a user upgrades their phone from certain buggy implementations of Android 2.2
     * to a newer, non-buggy version of Android, the device ID may change.  Or, if a user uninstalls your app on
     * a device that has neither a proper Android ID nor a Device ID, this ID may change on reinstallation.
     *
     * Note that if the code falls back on using TelephonyManager.getDeviceId(), the resulting ID will NOT
     * change after a factory reset.  Something to be aware of.
     *
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID directly.
     *
     * @see http://code.google.com/p/android/issues/detail?id=10603
     *
     * @return a UUID that may be used to uniquely identify your device for most purposes.
     */
    public String getDeviceUUID() {
        return uuid.toString();
    }
}
